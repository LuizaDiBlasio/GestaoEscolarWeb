@model GestaoEscolarWeb.Models.CreateEditEvaluationViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Add Evaluation</h1>

<hr />
<flash dismissable="true" />
<div class="row">
    <div class="col-md-6 offset-md-3">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="StudentId" class="control-label"></label>
                <input asp-for="StudentId" class="form-control"
                       id="studentIdInput"
                       placeholder="Insert student's id number..." />
                <span id="studentErrorFeedback" class="text-danger"></span>
                <span asp-validation-for="StudentId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StudentFullName" class="control-label"></label>
                <input asp-for="StudentFullName" class="form-control" readonly />
                <span asp-validation-for="StudentFullName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SelectedSubjectId" class="control-label"></label>
                <select asp-for="SelectedSubjectId" asp-items="Model.Subjects" class="form-control" id="subjectDropdown"></select>
                <span asp-validation-for="SelectedSubjectId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ExamDate" class="control-label"></label>
                <div>
                    <input type="text" id="examDateInput" asp-for="ExamDate" class="form-control" />
                </div>
                <span asp-validation-for="ExamDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Score" class="control-label"></label>
                <input asp-for="Score" class="form-control" />
                <span asp-validation-for="Score" class="text-danger"></span>
            </div>
            <div class="form-group mt-3 d-flex justify-content-between align-items-center">
                <input type="submit" value="Add" class="btn btn-action-primary" />
                <a asp-action="Index" class="btn btn-action-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            // Inicializa o DatePicker para ExamDate
            var examDatePicker = new ej.calendars.DatePicker({
                format: 'MM/dd/yyyy',
                placeholder: 'Select a date',
                maxDate: new Date()
            });
            examDatePicker.appendTo('#examDateInput'); //ligação ao elemento de ExamDate

            const studentIdInput = $("#studentIdInput");
            const subjectDropdown = $("#subjectDropdown");
            const studentFullNameInput = $("#StudentFullName"); // para preencher o nome automatico
            const idValidationSpan = $('span[data-valmsg-for="StudentId"]'); // Span do asp-validation-for="StudentId"
            const studentErrorFeedback = $("#studentErrorFeedback");

            // limpar mensagens de erro
            function clearValidationMessages() {
                idValidationSpan.text('');
                studentErrorFeedback.text('');
                studentIdInput.removeClass("input-validation-error");
                var validator = $("form").validate();
                validator.element(studentIdInput);
            }

            //buscar e popular as disciplinas
            function fetchAndPopulateSubjects() {
                const studentIdString = studentIdInput.val().trim();
                let studentId = parseInt(studentIdString, 10); // Converte para número

                // Limpar mensagens de erro antes de qualquer ação
                clearValidationMessages();

                // Limpar e adicionar placeholder caso id inválido
                if (studentIdString.length === 0 || isNaN(studentId) || studentId <= 0) {
                    studentFullNameInput.val('');

                    return;
                }


                //aplicar ajax
                $.ajax({
                    url: '@Url.Action("GetSubjectsForStudentEvaluation", "Evaluations")',
                    type: 'GET',
                    dataType: 'json',
                    data: { id: studentId },
                    success: function (subjects) {
                        subjectDropdown.empty(); // Limpa o dropdown

                        // Adicionar um placeholder
                        subjectDropdown.append('<option value="">--- Select a Subject ---</option>');

                        if (subjects && subjects.length > 0) {
                            $.each(subjects, function (i, subject) {
                                subjectDropdown.append('<option value="' + subject.value + '">' + subject.text + '</option>');
                            });
                        } else {
                            subjectDropdown.append('<option value="">No subjects available for this student.</option>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to retrieve subjects', error);
                        console.error('Status:', status);
                        console.error('Response Text:', xhr.responseText);

                        subjectDropdown.empty().append('<option value="">Failed to retrieve subjects</option>'); // Mensagem no dropdown

                        // Exibir a mensagem de erro
                        if (xhr.responseText) {
                            studentErrorFeedback.text(xhr.responseText).addClass('text-danger');
                        } else {
                            studentErrorFeedback.text('An unknown error occurred while retrieving subjects.').addClass('text-danger');
                        }
                        studentFullNameInput.val('Error fetching student');
                    }
                });

                // carregar o nome do aluno
                getAndPopulateStudentName(studentId);
            }

            // buscar e popular o nome do aluno
            function getAndPopulateStudentName(studentId) {

                if (studentId > 0) {
                    $.ajax({
                        url: '@Url.Action("GetStudentFullNameByIdAsync", "Students")',
                        type: 'GET',
                        dataType: 'json',
                        data: { id: studentId },
                        success: function (data) {
                            if (data && data.fullName) {
                                studentFullNameInput.val(data.fullName);
                                clearValidationMessages(); // Limpa validações se o aluno for encontrado
                            } else {
                                studentFullNameInput.val('Student not found');
                                studentErrorFeedback.text('Student not found with the provided id.').addClass('text-danger');
                            }
                        },
                        error: function (xhr, status, error) { //XMLHttpRequest - xhr objeto que vai trazer a resposta HTTP, nesse caso contém um texto
                            console.error('Failed to retrieve student name', error);
                            studentFullNameInput.val('Error loading student name');
                        }
                    });
                } else {
                    studentFullNameInput.val('');
                }
            }


            // Ativar a busca quando perde o foco
            studentIdInput.on('blur', fetchAndPopulateSubjects);

            // Limpar mensagens de erro
            studentIdInput.on('focus', clearValidationMessages);

            //inicializar a view
            // studentFullNameInput.val('');
            idValidationSpan.text('');

        });
    </script>
}