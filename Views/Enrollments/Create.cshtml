@model GestaoEscolarWeb.Models.CreateEnrollmentViewModel

@{
    ViewData["Title"] = "Create";
}


<h2>Enroll in subject</h2>


<flash dismissable="true" />
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post">
            <div class="form-group">
                <label asp-for="StudentFullName" class="control-label"></label>
                <input asp-for="StudentFullName" class="form-control"
                       id="studentFullNameInput" 
                placeholder="Insert name of the student..."
                       readonly="@(Model.StudentFullName != null && !string.IsNullOrWhiteSpace(Model.StudentFullName))" /> @*campo será readonly caso nome já venha pré preenchido*@
                <span id="studentErrorFeedback" class="text-danger"></span>
                <span asp-validation-for="StudentFullName" class="text-danger"></span>
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="EnrollmentDate" class="control-label"></label>
                <div>
                    <input type="text" id="enrollmentDateInput" asp-for="EnrollmentDate" class="form-control" />
                </div>
                <span asp-validation-for="EnrollmentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SelectedSubjectId" class="control-label"></label>
                <select asp-for="SelectedSubjectId" asp-items="Model.Subjects" class="form-control" id="subjectDropdown"></select>
                <span asp-validation-for="SelectedSubjectId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>


<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        $(document).ready(function () {
             var enrollmentDatePicker = new ej.calendars.DatePicker({
                 format: 'MM/dd/yyyy',
                 placeholder: 'Select a date'
             });
             enrollmentDatePicker.appendTo('#enrollmentDateInput');

             const studentFullNameInput = $("#studentFullNameInput");
            const subjectDropdown = $("#subjectDropdown");
            const studentErrorFeedback = $("#studentErrorFeedback"); // Selecionar o novo span

            // Função para limpar a mensagem de erro específica do aluno
            function clearStudentError() {
                studentErrorFeedback.text(''); // Limpa o texto do span
            }

            // buscar e popular as disciplinas
            function fetchAndPopulateSubjects() {
                const studentFullName = studentFullNameInput.val().trim();

                // Limpa qualquer mensagem de erro anterior ao iniciar uma nova busca
                clearStudentError();

                // limpa e adiciona placeholder se o nome estiver vazio
                if (studentFullName.length === 0) {
                    subjectDropdown.empty();
                    return; // Sai da função
                }

                $.ajax({
                    url: '@Url.Action("GetSubjectsForStudent", "Enrollments")',
                    type: 'GET',
                    dataType: 'json',
                    data: { studentFullName: studentFullName },
                    success: function (subjects) {
                        subjectDropdown.empty(); // Limpa o dropdown

                        // placeholder
                        subjectDropdown.append('<option value="0">Select a subject...</option>');

                        if (subjects && subjects.length > 0) {
                            $.each(subjects, function (i, subject) {
                                subjectDropdown.append('<option value="' + subject.value + '">' + subject.text + '</option>');
                            });
                        }
                        else   // Se nenhuma disciplina for encontrada
                        {
                            subjectDropdown.append('<option value="0">No subjects found.</option>');
                        }
                    },
                    error: function (xhr, status, error) {  //XMLHttpRequest - xhr objeto que vai trazer a resposta HTTP, nesse caso contém um texto
                        console.error('Failed to retrieve subjects', error);
                        console.error('Status:', status);
                        console.error('Response Text:', xhr.responseText);

                        subjectDropdown.empty(); // Limpa o dropdown
                        subjectDropdown.append('<option value="0">Failed to retrieve subjects</option>'); // Mensagem no dropdown

                        // Exibir a mensagem de erro
                        if (xhr.responseText) 
                        { 
                            studentErrorFeedback.text(xhr.responseText);
                        } 
                        else 
                        {
                            studentErrorFeedback.text('An unknown error occurred while retrieving subjects.');
                        }
                    }
                });
            }

            // Ativar a busca quando perde o foco (blur)
            studentFullNameInput.on('blur', fetchAndPopulateSubjects);

            // Limpa a mensagem de erro do aluno
            studentFullNameInput.on('focus', clearStudentError);

            // inicialização da view
            if (studentFullNameInput.val().trim().length > 0) {
                fetchAndPopulateSubjects();
            } 
            else
            {
                subjectDropdown.empty();
            }
        });
    </script>
}
