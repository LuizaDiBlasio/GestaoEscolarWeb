@model GestaoEscolarWeb.Models.CreateEnrollmentViewModel

@{
    ViewData["Title"] = "Create";
}

<h2>Enroll in subject</h2>

<flash dismissable="true" />
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post">
            <div class="form-group">
                <label asp-for="StudentId" class="control-label"></label>
                <input asp-for="StudentId" class="form-control"
                       id="studentIdInput"
                       placeholder="Insert student's Id number..."
                       readonly="@(Model.StudentId != 0)" /> @* campo será readonly caso ID já venha pré-preenchido *@
                <span id="studentErrorFeedback" class="text-danger"></span>
                <span asp-validation-for="StudentId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StudentFullName" class="control-label"></label>
                <input asp-for="StudentFullName" class="form-control"
                       id="studentFullNameInput"
                       readonly="@(Model.StudentId != 0)" /> @* campo será readonly caso nome já venha pré-preenchido *@
                <span asp-validation-for="StudentFullName" class="text-danger"></span>
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="EnrollmentDate" class="control-label"></label>
                <div>
                    <input type="text" id="enrollmentDateInput" asp-for="EnrollmentDate" class="form-control" />
                </div>
                <span asp-validation-for="EnrollmentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SelectedSubjectId" class="control-label"></label>
                <select asp-for="SelectedSubjectId" asp-items="Model.Subjects" class="form-control" id="subjectDropdown"></select>
                <span asp-validation-for="SelectedSubjectId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        $(document).ready(function () {
            var today = new Date();
            today.setHours(0, 0, 0, 0);

            var enrollmentDatePicker = new ej.calendars.DatePicker({
                format: 'MM/dd/yyyy', 
                placeholder: 'Select a date',
                min: today
            });
            enrollmentDatePicker.appendTo('#enrollmentDateInput');

            const studentIdInput = $("#studentIdInput");
            const subjectDropdown = $("#subjectDropdown");
            const studentFullNameInput = $("#studentFullNameInput");
            const studentErrorFeedback = $("#studentErrorFeedback");

            function clearValidationMessages() {
                studentErrorFeedback.text('');
                studentIdInput.removeClass("input-validation-error");
                var validator = $("form").validate();
                validator.element(studentIdInput); // validação
            }

            function fetchAndPopulateSubjectsAndStudentName() {
                const studentIdString = studentIdInput.val().trim();
                let studentId = parseInt(studentIdString, 10);

                clearValidationMessages(); // limpa buscas

                if (studentIdString.length === 0 || isNaN(studentId) || studentId <= 0) {
                    studentFullNameInput.val('');
                    return; // Sai da função se o ID for inválido/vazio
                }

                // AJAX para buscar Subjects
                $.ajax({
                    url: '@Url.Action("GetSubjectsForStudent", "Enrollments")',
                    type: 'GET',
                    dataType: 'json',
                    data: { id: studentId },
                    success: function (subjects) {
                        subjectDropdown.empty();
                        subjectDropdown.append('<option value="">--- Select a Subject ---</option>');

                        if (subjects && subjects.length > 0) {
                            $.each(subjects, function (i, subject) {
                                subjectDropdown.append('<option value="' + subject.value + '">' + subject.text + '</option>');
                            });
                        } else {
                            subjectDropdown.append('<option value="">No subjects available for this student.</option>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to retrieve subjects', error);
                        console.error('Status:', status);
                        console.error('Response Text:', xhr.responseText);

                        subjectDropdown.empty().append('<option value="">Failed to retrieve subjects</option>');

                        if (xhr.responseText) {
                            studentErrorFeedback.text(xhr.responseText).addClass('text-danger');
                        } else {
                            studentErrorFeedback.text('An unknown error occurred while retrieving subjects.').addClass('text-danger');
                        }
                    }
                });

                // AJAX para carregar o nome do aluno
                $.ajax({
                    url: '@Url.Action("GetStudentFullNameByIdAsync", "Students")',
                    type: 'GET',
                    dataType: 'json',
                    data: { id: studentId },
                    success: function (data) {
                        if (data && data.fullName) {
                            studentFullNameInput.val(data.fullName);
                            studentIdInput.prop('readonly', true); //mudar campos para ReadOnly empty caso de sucesso
                            studentFullNameInput.prop('readonly', true);
                            clearValidationMessages(); // Limpa validações se obter sucesso
                        } else {
                            studentFullNameInput.val('Student not found');
                            studentErrorFeedback.text('Student not found with the provided id.').addClass('text-danger');
                            studentIdInput.prop('readonly', false);
                            studentFullNameInput.prop('readonly', false);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to retrieve student name', error);
                        studentFullNameInput.val('Error loading student name');
                        studentErrorFeedback.text('An error occurred while fetching student name.').addClass('text-danger');
                        studentIdInput.prop('readonly', false);
                        studentFullNameInput.prop('readonly', false);
                    }
                });
            }

            // Se StudentId não vem pré-preenchido
            studentIdInput.on('blur', function() {
                if (!$(this).prop('readonly')) {
                    fetchAndPopulateSubjectsAndStudentName();
                }
            });

            // Limpar mensagens de erro após foco
            studentIdInput.on('focus', function() {
                if (!$(this).prop('readonly')) {
                    clearValidationMessages();
                    studentFullNameInput.val(''); // Limpar o nome ao começar a editar o ID
                    subjectDropdown.empty().append('<option value="">--- Select a Subject ---</option>'); // Limpa subjects
                }
            });

            // Se StudentId for pré-preenchido (Model.StudentId != 0)
            if (studentIdInput.val() != '0' && studentIdInput.val() != '') {
                fetchAndPopulateSubjectsAndStudentName();
            }
        });
    </script>
}
